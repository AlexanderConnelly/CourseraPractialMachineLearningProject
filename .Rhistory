install.packages("carat")
require(caret)
require(kernlab)
data(spam)
## Example: Data Splitting
inTrain <- createDataPartition(y=spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
install.packages("kernlab")
require(caret)
require(kernlab)
data(spam)
## Example: Data Splitting
inTrain <- createDataPartition(y=spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
require(caret)
install.packages("caret")
require(caret)
require(kernlab)
data(spam)
## Example: Data Splitting
inTrain <- createDataPartition(y=spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
data(spam)
View(spam)
require(caret)
require(kernlab)
data(spam)
## Example: Data Splitting
inTrain <- createDataPartition(y=spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
## Fit a Model
set.seet(32343)
modelFit<- train(type ~., data = training, method = "glm")
modelFit
## Fit a Model
set.seet(32343)
modelFit<- train(type ~., data = training, method = "glm")
modelFit
install.packages("e1071")
set.seed(32343)
modelFit<- train(type ~., data = training, method = "glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$type)
folds <- createFolds(y = spam$type, k = 1-, list = TRUE, returnTrain = TRUE)
folds <- createFolds(y = spam$type, k = 10, list = TRUE, returnTrain = TRUE)
folds <- createFolds(y = spam$type, k = 10, list = TRUE, returnTrain = TRUE)
sapply(folds,length)
folds <- createResample(y = spam$type, k = 10, list = TRUE)
sapply(folds,length)
tme <- 1:1000
folds <- createTimeSlices(y=tme,initialWindow = 20, horizon = 10)
require(caret)
require(kernlab)
#Spam Examples:
data(spam)
## Example: Data Splitting
inTrain <- createDataPartition(y=spam$type, p = 0.75, list = FALSE)
## 75 % in training, 25% in test
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
## Data splitting k-fold splitting
folds <- createFolds(y = spam$type, k = 10, list = TRUE, returnTrain = TRUE)
sapply(folds,length)
## Data Splitting: Resampling # resampling with replacement of the values
folds <- createResample(y = spam$type, k = 10, list = TRUE)
sapply(folds,length)
## Data Splitting: Time Slices
tme <- 1:1000
folds <- createTimeSlices(y=tme,initialWindow = 20, horizon = 10)
## Fit a Model
set.seed(32343)
modelFit<- train(type ~., data = training, method = "glm")
modelFit
## Final Model
modelFit$finalModel
## Prediction
predictions <- predict(modelFit, newdata = testing)
# Confusion Matrix
confusionMatrix(predictions, testing$type)
install.packages("ISLR")
require(ISLR)
require(ggplot2)
require(caret)
data(Wage)
summary(Wage)
featurePlot(x = training[,c("age","education","jobclass")], y = training$wage, plot = "pairs")
featurePlot(x = training[,c("age","education","jobclass")], y = training$wage, plot = "pairs")
featurePlot(x = training[,c("age","education","jobclass","race","maritl")], y = training$wage, plot = "pairs")
featurePlot(x = training[,c("age","education","jobclass","race","maritl")], y = training$wage, plot = "pairs")
View(Wage)
featurePlot(x = training[,c("age","education","jobclass","race","maritl")], y = training$wage, plot = "pairs")
training[,c("age","education","jobclass","race","maritl")]
featurePlot(x = training[,c("age","jobclass","race","maritl")], y = training$wage, plot = "pairs")
require(ISLR)
require(ggplot2)
require(caret)
featurePlot(x = training[,c("age","jobclass","race","maritl")], y = training$wage, plot = "pairs")
set.seed(32343)
data(Wage)
summary(Wage)
featurePlot(x = training[,c("age")], y = training$wage, plot = "pairs")
featurePlot(x = training[,1:5], y = training$wage, plot = "pairs")
featurePlot(x = training, y = training$wage, plot = "pairs")
featurePlot(x = training[,2], y = training$wage, plot = "pairs")
require(ISLR)
require(ggplot2)
require(caret)
data(Wage)
summary(Wage)
featurePlot(x = training[,2], y = training$wage, plot = "pairs")
inTrain <- createDataPartition(y=spam$type, p = 0.75, list = FALSE)
## 75 % in training, 25% in test
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
featurePlot(x = training[,2], y = training$wage, plot = "pairs")
featurePlot(x = training[,c("age")], y = training$wage, plot = "pairs")
inTrain <- createDataPartition(y=Wage$wage, p = 0.75, list = FALSE)
## 75 % in training, 25% in test
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
featurePlot(x = training[,c("age")], y = training$wage, plot = "pairs")
View(training)
inTrain <- createDataPartition(y=Wage$wage, p = 0.75, list = FALSE)
## 75 % in training, 25% in test
training <- spam[inTrain,]
testing <- spam[-inTrain,]
View(training)
require(ISLR)
require(ggplot2)
require(caret)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p = 0.75, list = FALSE)
## 75 % in training, 25% in test
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
featurePlot(x = training[,c("age")], y = training$wage, plot = "pairs")
inTrain <- createDataPartition(y=Wage$wage, p = 0.75, list = FALSE)
## 75 % in training, 25% in test
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
featurePlot(x = training[,c("age")], y = training$wage, plot = "pairs")
featurePlot(x = training[,c("age","education", "jobclass","race","maritl" )], y = training$wage, plot = "pairs")
install.packages("caret")
install.packages("caret")
install.packages("kernlab")
install.packages("ISLR")
install.packages("ggplot2")
source('D:/Google Drive/Coursera/Data Science/Practical Machine Learning/Project/Practical Machine Learning/Intro Functions Week 2.R')
folds <- createResample(y = spam$type, k = 10, list = TRUE)
sapply(folds,length)
source('D:/Google Drive/Coursera/Data Science/Practical Machine Learning/Project/Practical Machine Learning/Intro Functions Week 2.R')
source('D:/Google Drive/Coursera/Data Science/Practical Machine Learning/Project/Practical Machine Learning/Intro Functions Week 2.R')
install.packages("e1071")
source('D:/Google Drive/Coursera/Data Science/Practical Machine Learning/Project/Practical Machine Learning/Intro Functions Week 2.R')
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$type)
inTrain <- createDataPartition(y=spam$type, p = 0.75, list = FALSE)
## 75 % in training, 25% in test
training <- spam[inTrain,]
testing <- spam[-inTrain,]
data(spam)
## Example: Data Splitting
inTrain <- createDataPartition(y=spam$type, p = 0.75, list = FALSE)
## 75 % in training, 25% in test
training <- spam[inTrain,]
testing <- spam[-inTrain,]
modelFit<- train(type ~., data = training, method = "glm")
modelFit
## Final Model
modelFit$finalModel
## Prediction
predictions <- predict(modelFit, newdata = testing)
# Confusion Matrix
require(ISLR)
require(ggplot2)
require(caret)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p = 0.75, list = FALSE)
## 75 % in training, 25% in test
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
featurePlot(x = training[,c("age","education", "jobclass","race","maritl" )], y = training$wage, plot = "pairs")
